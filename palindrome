def longest_palindrome(s):
    start = end = 0
    # every letter can be either the middle of odd-lettered palindrome
    # or one of two middles of even-lettered one.
    # so we take every letter and expand in both sides,
    # or take letter and neighbor and expand in both sides
    for i in range(len(s)):
        l = r = i
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        # we make one extra step, and get l and r 1 larger than actual values.
        # because length is r - l + 1, what we need is r - 1 - l - 1 + 1 = r - l - 1
        len1 = r - l - 1
        l, r = i, i + 1
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        len2 = r - l - 1
        m_len = max(len1, len2)
        if m_len > end - start:
            start = i - (m_len - 1) // 2
            end = i + m_len // 2
    return s[start:end + 1]


longest_palindrome("dbaabddb")
